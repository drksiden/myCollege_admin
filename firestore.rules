rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Вспомогательные функции
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Функция для проверки, является ли пользователь куратором группы
    function isGroupCurator(groupId) {
      return request.auth != null && 
        get(/databases/$(database)/documents/groups/$(groupId)).data.curatorId == request.auth.uid;
    }

    // Функция для проверки, является ли пользователь преподавателем предмета в группе
    function isGroupTeacher(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth != null && 
        group.subjects.hasAny([{'teacherId': request.auth.uid}]);
    }

    // Правила для пользователей
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // Правила для учителей
    match /teachers/{teacherId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || 
        (isTeacher() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teacherId == teacherId);
    }

    // Правила для студентов
    match /students/{studentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || 
        (isStudent() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentId == studentId);
    }

    // Правила для групп
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Правила для предметов
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Правила для расписания
    match /schedules/{scheduleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Правила для журнала
    match /journals/{journalId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isTeacher();
    }

    // Правила для оценок
    match /grades/{gradeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isTeacher();
    }

    // --- Посещаемость (attendance) ---
    match /attendance/{attendanceId} {
      // Студенты могут читать только свою посещаемость
      // Преподаватели могут читать посещаемость своих групп
      // Админы могут читать всю посещаемость
      allow read: if isAuthenticated() && 
        (isAdmin() || 
         isTeacher() || 
         (isStudent() && resource.data.studentId == request.auth.uid));
      // Отмечать посещаемость могут преподаватели своих групп и админы
      allow write: if isAdmin() || isTeacher();
    }

    // --- Задания (assignments) ---
    match /assignments/{assignmentId} {
      // Читать задания могут все аутентифицированные
      allow read: if isAuthenticated();
      // Создавать/редактировать задания могут преподаватели своих групп и админы
      allow write: if isAdmin() || isTeacher();
    }

    // --- Чаты (chats) и Сообщения (messages) ---
    match /chats/{chatId} {
      // Участники чата могут читать и писать в него
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Админ может читать все чаты (для модерации, если нужно)
      allow get: if isAdmin(); // get - для чтения одного документа
      // Создание чатов - зависит от логики приложения (кто может инициировать)
      // allow create: if isAuthenticated(); 
    }

    match /chats/{chatId}/messages/{messageId} {
      // Участники чата могут читать и писать сообщения
      allow read, write: if isAuthenticated() && 
                           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      // Админ может читать все сообщения
      allow list: if isAdmin(); // list - для чтения коллекции
      allow get: if isAdmin();
    }

    // --- Статистика (statistics) ---
    // (Ваши правила были хороши, можно оставить или адаптировать)
    match /statistics/{statDoc} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Общее правило (если нужно что-то не покрытое выше) ---
    // Оно уже есть у вас, но лучше делать правила более гранулярными
    // match /{document=**} {
    //   allow read: if request.auth != null;
    // }
  }
}
