import {
  Firestore,
  doc,
  getDoc,
  updateDoc,
  deleteDoc,
  collection,
  addDoc,
  getDocs,
  serverTimestamp,
  Timestamp,
  orderBy,
  query,
  where,
} from 'firebase/firestore';
import type { Subject } from '@/types';
import { db } from '@/lib/firebase';

// Re-export Subject type for convenience
export type { Subject };

const SUBJECTS_COLLECTION = 'subjects';

/**
 * Creates a new subject in Firestore.
 * @param db Firestore instance.
 * @param subjectData Object containing subject details (name, description, credits, hours, teacherId, groupId).
 *                    The 'id' will be auto-generated by Firestore.
 *                    'createdAt' and 'updatedAt' will be added by this function.
 * @returns Promise<string> The ID of the newly created subject.
 */
export const createSubject = async (
  db: Firestore,
  subjectData: Omit<Subject, 'id' | 'createdAt' | 'updatedAt'>
): Promise<string> => {
  const dataWithTimestamps = {
    ...subjectData,
    createdAt: serverTimestamp() as Timestamp,
    updatedAt: serverTimestamp() as Timestamp,
  };
  const docRef = await addDoc(collection(db, SUBJECTS_COLLECTION), dataWithTimestamps);
  return docRef.id;
};

/**
 * Fetches a specific subject from Firestore by its document ID.
 * @param db Firestore instance.
 * @param subjectId The document ID of the subject.
 * @returns Promise<Subject | null> The subject or null if not found.
 */
export const getSubject = async (
  db: Firestore,
  subjectId: string
): Promise<Subject | null> => {
  const subjectRef = doc(db, SUBJECTS_COLLECTION, subjectId);
  const docSnap = await getDoc(subjectRef);
  if (docSnap.exists()) {
    return { id: docSnap.id, ...docSnap.data() } as Subject;
  }
  return null;
};

/**
 * Fetches all subjects from Firestore, ordered by name.
 * @param db Firestore instance.
 * @returns Promise<Subject[]> An array of subjects.
 */
export const getAllSubjects = async (db: Firestore): Promise<Subject[]> => {
  const subjectsCollection = collection(db, SUBJECTS_COLLECTION);
  const q = query(subjectsCollection, orderBy('name', 'asc')); // Order by name
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(docSnap => ({
    id: docSnap.id,
    ...docSnap.data(),
  } as Subject));
};

/**
 * Updates an existing subject in Firestore.
 * @param db Firestore instance.
 * @param subjectId The document ID of the subject to update.
 * @param updates Partial data of Subject to update (name, description, credits, hours, teacherId, groupId).
 *                'updatedAt' will be updated by this function.
 * @returns Promise<void>
 */
export const updateSubject = async (
  db: Firestore,
  subjectId: string,
  updates: Partial<Omit<Subject, 'id' | 'createdAt' | 'updatedAt'>>
): Promise<void> => {
  const subjectRef = doc(db, SUBJECTS_COLLECTION, subjectId);
  const dataWithTimestamp = {
    ...updates,
    updatedAt: serverTimestamp() as Timestamp,
  };
  return updateDoc(subjectRef, dataWithTimestamp);
};

/**
 * Deletes a subject from Firestore.
 * @param db Firestore instance.
 * @param subjectId The document ID of the subject to delete.
 * @returns Promise<void>
 */
export const deleteSubject = async (
  db: Firestore,
  subjectId: string
): Promise<void> => {
  const subjectRef = doc(db, SUBJECTS_COLLECTION, subjectId);
  return deleteDoc(subjectRef);
};

export async function getSubjects() {
  const subjectsRef = collection(db, SUBJECTS_COLLECTION);
  const snapshot = await getDocs(subjectsRef);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Subject[];
}

export async function getSubjectsByTeacher(teacherId: string) {
  const subjectsRef = collection(db, SUBJECTS_COLLECTION);
  const q = query(subjectsRef, where('teacherId', '==', teacherId));
  const snapshot = await getDocs(q);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Subject[];
}

export async function getSubjectsByGroup(groupId: string) {
  const subjectsRef = collection(db, SUBJECTS_COLLECTION);
  const q = query(subjectsRef, where('groupId', '==', groupId));
  const snapshot = await getDocs(q);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Subject[];
}
